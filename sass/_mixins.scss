@mixin xs() {
    @media (max-width: 576px) {
        @content;
    } 
}

@mixin sm() {
    @media (min-width: 576px) {
        @content;
    } 
}

@mixin md() {
    @media (min-width: 768px) {
        @content;
    } 
}

@mixin lg() {
    @media (min-width: 992px) {
        @content;
    } 
}

@mixin xl() {
    @media (min-width: 1200px) {
        @content;
    } 
}

@mixin phones() {
    @media (max-width: 767px) {
        @content;
    } 
}

@mixin tablets() {
    @media (min-width: 768px) and (max-width: 991px) {
        @content;
    }
}

@mixin phones-tablets() {
    @media (max-width: 991px) {
        @content;
    }
}

@mixin tablets-sm-desktops() {
    @media (min-width: 768px) and (max-width: 1199px) {
        @content;
    }
}

@mixin sm-desktops() {
    @media (min-width: 992px) and (max-width: 1199px) {
        @content;
    }
}

@mixin lg-desktops() {
    @media (min-width: 1200px) {
        @content;
    }
}

@mixin desktops() {
    @media (min-width: 992px) {
        @content;
    }
}

@mixin all-but-phones() {
    @media (min-width: 768px) {
        @content;
    }
}

// For maintaining the width of an element when you add padding
// @include box-sizing()
@mixin box-sizing() {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
}

@mixin grayscale() {
    -webkit-filter: grayscale(100%);
    -moz-filter: grayscale(100%);
    -ms-filter: grayscale(100%);
    -o-filter: grayscale(100%);
    filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter â€¦.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
    filter: gray;
}

// Ellipsis at end of line, no wrap.
// @include text-overflow()
@mixin text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Input placeholders
// @include placeholder()
@mixin placeholder() {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }
    
    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }

    &.placeholder {
        @content;
    }
}

// Vertically center
// @include vertical-align(POSITION)
@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }

// Gradient Backgrounds
// @include horizontal(COLOR, COLOR)
@mixin horizontal($startColor: $white, $endColor: $lightergrey) {
    background-color: $endColor;
    background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(left, $startColor, $endColor);
    background-image: -moz-linear-gradient(left, $startColor, $endColor);
    background-image: -ms-linear-gradient(left, $startColor, $endColor);
    background-image: -o-linear-gradient(left, $startColor, $endColor);
    background-image: linear-gradient(left, $startColor, $endColor);
    background-repeat: repeat-x;
}

// @include vertical(COLOR, COLOR)
@mixin vertical($startColor: $white, $endColor:  $lightergrey) {
    background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-color: $endColor;
    background-image: -moz-linear-gradient(top, $startColor, $endColor);
    background-image: -ms-linear-gradient(top, $startColor, $endColor);
    background-image: -o-linear-gradient(top, $startColor, $endColor);
    background-image: linear-gradient(top, $startColor, $endColor);
    background-repeat: repeat-x;
}

// @include directional(COLOR, COLOR, DEG)
@mixin directional($startColor: $white, $endColor: $lightergrey, $deg: 45deg) {
    background-color: $endColor;
    background-image: -moz-linear-gradient($deg, $startColor, $endColor);
    background-image: -ms-linear-gradient($deg, $startColor, $endColor);
    background-image: -webkit-linear-gradient($deg, $startColor, $endColor);
    background-image: -o-linear-gradient($deg, $startColor, $endColor);
    background-image: linear-gradient($deg, $startColor, $endColor);
    background-repeat: repeat-x;
}

// Box Styles
// @include rounded(INT)
@mixin rounded($radius: 4px) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

// @include box-shadow(SHADOW DELCARATION)
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

// @include drop-shadow(X-OFFSET, Y-OFFSET, BLUR, ALPHA)
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
    -webkit-box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
    -moz-box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
    box-shadow: $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
}

// @include opacity(DECIMAL 0-1)
@mixin opacity($opacity: .5) {
    -ms-filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})");
    filter: alpha(opacity=($opacity * 100));
    -moz-opacity: $opacity;
    -khtml-opacity: $opacity;
    opacity: $opacity;
}

// Mixin for transforming element
// @include transform(ACTION(VALUE))
@mixin transform($transform) {
    -webkit-transform: $transform;
    -moz-transform: $transform;
    -ms-transform: $transform;
    -o-transform: $transform;
    transform: $transform;
}

// Mixin for animating element
// @include animation(KEYFRAME TIME EFFECT)
@mixin animation ($animation) {
    -webkit-animation: $animation;
    -moz-animation: $animation;
    -o-animation: $animation;
    animation: $animation;
}

// Mixin for altering animation duration 
// @include animation-duration(TIME)
@mixin animation-duration($time) {
    -webkit-animation-duration: $time;
    -moz-animation-duration: $time;
    -ms-animation-duration: $time;
    -o-animation-duration: $time;
    animation-duration: $time;
}

// Mixin for altering animation delay 
// @include animation-duration(TIME)
@mixin animation-delay($time) {
    -webkit-animation-delay: $time;
    -moz-animation-delay: $time;
    -ms-animation-delay: $time;
    -o-animation-delay: $time;
    animation-delay: $time;
}

// Mixin for altering animation interation count
// @include animation-iteration-count(COUNT)
@mixin animation-iteration-count($count) {
    -webkit-animation-iteration-count: $count;
    -moz-animation-iteration-count: $count;
    -ms-animation-iteration-count: $count;
    -o-animation-iteration-count: $count;
    animation-iteration-count: $count;
}

// Mixin for creating animations using single or "all" property transitions
// @include transition(PROPERTY DURATION DELAY(OPT) TIMING-FUNCTION)
@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

// Mixin for creating animations using multiple property transitions
// @include multi-transition("PROPERTY DURATION DELAY(OPT) TIMING-FUNCTION, PROPERTY DURATION DELAY(OPT) TIMING-FUNCTION")
@mixin multi-transition($transition) {
    -webkit-transition: #{$transition};
    -moz-transition: #{$transition};
    -ms-transition: #{$transition};
    -o-transition: #{$transition};
    transition: #{$transition};
}

// Object contains floated children
// @include clearfix()
@mixin clearfix() {
    *zoom: 1;
    &:before,
    &:after {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
}

// Image Replacement
// @include hide-text()
@mixin hide-text() {
    font: 0/0 a;
    text-shadow: none;
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

// Value using calc
// @include width-calc(STRING PROPERTY, STRING OPERATION)
@mixin css3-calc($property, $operation) {
    #{$property}: -moz-calc(#{$operation});
    #{$property}: -webkit-calc(#{$operation});
    #{$property}: calc(#{$operation});
}

// Horizontally center a block-level element
// @include center-block()
@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Values for property in REM and PX with 1rem = 16px by Karl Merkli
// @inlcude rem-fallback(STRING PROPERTY, REMVAL1, REMVAL2, REMVAL3, REMVAL4)
// @inlcude rem-px(margin, 1, 1, 2, 1.5) outputs or
// @include rem-px(margin, 1rem, 1rem, 2rem, 1.5rem) outputs:
// margin: 160px 320px 480px 640px;
// margin: 10rem 20rem 30rem 40rem;
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

@mixin rem-px($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));

        @if $value != 0 {
            $pxValues: #{$pxValues + $value*16}px;
        } @else {
            $pxValues: #{$pxValues + $value*16};
        }

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));

        @if $value != 0 {
            $remValues: #{$remValues + $value}rem;
        } @else {
            $remValues: #{$remValues + $value};
        }

        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}

// Values for property in REM and PX with 16px = 1rem adapted from mixin by Karl Merkli
// @inlcude px-rem(STRING PROPERTY, PXVAL1, PXVAL2, PXVAL3, PXVAL4)
// @inlcude px-rem(margin, 16, 16, 32, 24) or
// @include px-rem(margin, 16px, 16px, 32px, 24px) outputs:
// margin: 16px 16px 32px 24px;
// margin: 1rem 1rem 2rem 1.5rem;
@mixin px-rem($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));

        @if $value != 0 {
            $pxValues: #{$pxValues + $value}px;
        } @else {
            $pxValues: #{pxValues + $value};
        }

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));

        @if $value != 0 {
            $remValues: #{$remValues + $value/16}rem;
        } @else {
            $remValues: #{$remValues + $value};
        }

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}

@mixin rotate($deg) {
    -webkit-transform: rotate(#{$deg}deg);
    -moz-transform: rotate(#{$deg}deg);
    -ms-transform: rotate(#{$deg}deg);
    -o-transform: rotate(#{$deg}deg);
}

@mixin keyframes ($animation_name) {
    @-webkit-keyframes #{$animation-name} {
        @content
    }
 
    @-moz-keyframes #{$animation-name} {
        @content
    }
 
    @-o-keyframes #{$animation-name} {
        @content
    }
 
    @keyframes #{$animation-name} {
        @content
    }
}